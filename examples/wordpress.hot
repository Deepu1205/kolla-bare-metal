heat_template_version: pike

description: Example Heat Orchestration Template, launches multinode Wordpress site

parameters:
  # declaration of input parameters
  key_name:
    type: string
    description: SSH key pair to inject into created instances
    constraints:
      - custom_constraint: nova.keypair
  public_network:
    type: string
    description: Public Network for Wordpress site
    constraints:
      - custom_constraint: neutron.network
  db_server_image:
    type: string
    description: DB Server Image (Ubuntu 16.04)
    constraints:
      - custom_constraint: glance.image
  db_server_flavor:
    type: string
    description: DB Server Flavor
    constraints:
      - custom_constraint: nova.flavor
  web_server_image:
    type: string
    description: WWW Server Image (Ubuntu 16.04)
    constraints:
      - custom_constraint: glance.image
  web_server_flavor:
    type: string
    description: WWW Server Flavor
    constraints:
      - custom_constraint: nova.flavor
  
resources:
  # declaration of template resources

  wordpress_network:
        type: OS::Neutron::Net
        properties:
          name: wordpress-network

  wordpress_subnet:
        type: OS::Neutron::Subnet
        properties:
          network_id: { get_resource: wordpress_network }
          cidr: 192.168.222.0/24
          gateway_ip: 192.168.222.1

  wordpress_router:
        type: OS::Neutron::Router
        properties:
          external_gateway_info:
                network: { get_param: public_network }

  wordpress_router_interface:
        type: OS::Neutron::RouterInterface
        properties:
          router_id: { get_resource: wordpress_router }
          subnet_id: { get_resource: wordpress_subnet }

  web_secgroup:
        type: OS::Neutron::SecurityGroup
        properties:
          # only HTTP and HTTPS ports opened here
          # add SSH or other if you need them open
          rules: [
            {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 80,
            port_range_max: 80},
            {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 443,
            port_range_max: 443}]

  db_secgroup:
        type: OS::Neutron::SecurityGroup
        properties:
          # only MYSQL port opened here
          # add SSH or other if you need them open
          rules: [
            {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 3306,
            port_range_max: 3306}]

  db_server:
        type: OS::Nova::Server
        properties:
          image: { get_param: db_server_image }
          flavor: { get_param: db_server_flavor }
          security_groups: [{ get_resource: db_secgroup }]
          user_data_format: RAW
          user_data: |
            #include
            https://raw.githubusercontent.com/kris-at-occ/kolla-bare-metal/master/examples/mysql-cloud-init.yml
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: wordpress_network }

  web_server1:
        type: OS::Nova::Server
        properties:
          image: { get_param: web_server_image }
          flavor: { get_param: web_server_flavor }
          security_groups: [{ get_resource: web_secgroup }]
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                From nobody Fri Dec  9 00:31:04 2016
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                MIME-Version: 1.0
                --==BOUNDARY==
                MIME-Version: 1.0
                Content-Type: text/x-shellscript; charset="us-ascii"
                #!/bin/bash
                echo "$db_server_ip" >> /tmp/db_server
                echo "This is /$db_server_ip/ string" > /tmp/log1
                --==BOUNDARY==
                MIME-Version: 1.0
                Content-Type: text/x-include-url; charset="us-ascii"
                #include
                https://raw.githubusercontent.com/kris-at-occ/kolla-bare-metal/master/examples/www-cloud-init.yml
                --==BOUNDARY==--
              params:
#                db_server_ip: { get_attr: [db_server, networks, wordpress_network, 0] ] }
                db_server_ip: { get_attr: [ db_server, first_address ]}
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: wordpress_network }

  pool_member1:
        type: OS::Neutron::LBaaS::PoolMember
        properties:
          pool: { get_resource: pool }
          address: { get_attr: [ web_server1, first_address ]}
          protocol_port: 80
          subnet: { get_resource: wordpress_subnet }

  web_server2:
        type: OS::Nova::Server
        properties:
          image: { get_param: web_server_image }
          flavor: { get_param: web_server_flavor }
          security_groups: [{ get_resource: web_secgroup }]
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                From nobody Fri Dec  9 00:31:04 2016
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                MIME-Version: 1.0
                --==BOUNDARY==
                MIME-Version: 1.0
                Content-Type: text/x-shellscript; charset="us-ascii"
                #!/bin/bash
                echo "$db_server_ip" >> /tmp/db_server
                echo "This is /$db_server_ip/ string" > /tmp/log1
                --==BOUNDARY==
                MIME-Version: 1.0
                Content-Type: text/x-include-url; charset="us-ascii"
                #include
                https://raw.githubusercontent.com/kris-at-occ/kolla-bare-metal/master/examples/www-cloud-init.yml
                --==BOUNDARY==--
              params:
#                db_server_ip: { get_attr: [db_server, networks, wordpress_network, 0] ] }
                db_server_ip: { get_attr: [ db_server, first_address ]}
          key_name: { get_param: key_name }
          networks:
            - network: { get_resource: wordpress_network }

  pool_member2:
        type: OS::Neutron::LBaaS::PoolMember
        properties:
          pool: { get_resource: pool }
          address: { get_attr: [ web_server2, first_address ]}
          protocol_port: 80
          subnet: { get_resource: wordpress_subnet }


  monitor:
        type: OS::Neutron::LBaaS::HealthMonitor
        properties:
          delay: 3
          type: PING
          timeout: 3
          max_retries: 3
          pool: { get_resource: pool }

  pool:
        type: OS::Neutron::LBaaS::Pool
        properties:
          lb_algorithm: ROUND_ROBIN
          protocol: HTTP
          listener: { get_resource: listener }

  listener:
        type: OS::Neutron::LBaaS::Listener
        properties:
          loadbalancer: { get_resource: loadbalancer }
          protocol: HTTP
          protocol_port: 80

  loadbalancer:
        type: OS::Neutron::LBaaS::LoadBalancer
        properties:
          vip_subnet: { get_resource: wordpress_subnet }

  floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
          floating_network_id: { get_param: public_network }
          port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:
  # declaration of output parameters
  lburl:
    description: URL of the loadbalancer
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT/wordpress/
        params:
          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          PORT: { get_param: lb_port }
    description: >
      This URL is the "external" URL that can be used to access the
      Wordpress site.  
